# Alarm clock automations

input_number:
  alarm_clock_volume:
    name: 'Volume radiosveglia'
    min: 0
    max: 1
    step: 0.05
  alarm_clock_increment:
    name: 'Incremento volume radiosveglia'
    min: 0
    max: 1
    step: 0.01

automation:

  - alias: trigger_alarm_clock
    id: 097e61b4-7ced-4541-984a-03b70a8af97d
    description: Accende la radiosveglia sulla radio configurata all'orario della sveglia impostata sul telefono.
    trigger:
      # Data e ora correnti corrispondono all'orario del prossimo allarme configurato sul telefono (da 61 secondi prima: tolleranza orologi non sincronizzati)
      - trigger: template
        # FIXME hard-coded Android application name
        value_template: "{{ state_attr('sensor.daniele_shiba_next_alarm', 'Package') == 'com.google.android.deskclock' and as_timestamp(states('sensor.daniele_shiba_next_alarm')) - 61 < as_timestamp(now()) }}"
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: person.daniele
          state: 'home'
        - condition: numeric_state
          entity_id: sensor.people_count_home_local
          above: '0'
        # Non c'è bisogno di attivare di nuovo lo streaming se sta già riproducendo qualcosa
        - condition: template
          value_template: "{{ not is_state('media_player.bedroom', 'playing') }}"
    action:
      - action: notify.mobile_app_daniele_shiba
        data:
          title: "Sveglia"
          message: "Sveglia!!!"
          data:
            tag: alarm_clock
            sticky: 'true'
            priority: high
            ttl: 3600
            channel: alarm_stream
            actions:
              # Muta radiosveglia
              - action: alarm_clock_dismiss
                title: Annulla
      - action: media_player.volume_set
        data:
          entity_id: media_player.bedroom
          volume_level: '0'
      - action: media_player.play_media
        data:
          entity_id: media_player.bedroom
          # TODO fallback su media da media server o addirittura locale
          media_content_id: !secret alarm_clock_radio_station
          media_content_type: music
      # Incremento graduale del volume
      - action: script.alarm_clock_volume_increase

  - alias: alarm_clock_stop_increase
    id: 46c480ab-7d19-40e5-8597-96ef4b25f8e9
    description: Ferma l'incremento graduale del volume se la radiosveglia è stato stoppata o messa in pausa.
    trigger:
      - trigger: state
        entity_id: media_player.bedroom
        to:
          - 'off'
          - idle
          - paused
    action:
      - action: script.turn_off
        entity_id: script.alarm_clock_volume_increase
      - action: media_player.volume_set
        data:
          entity_id: media_player.bedroom
          volume_level: "{{ states('input_number.alarm_clock_volume')|float }}"

  - alias: alarm_clock_stop_mainbed_leaving
    id: 68eed46a-204e-11ef-8c7c-ab3783afe1ef
    description: Spegni la radiosveglia se il letto principale diventa vuoto
    trigger:
      - trigger: state
        entity_id: binary_sensor.presence_mainbed
        to: 'off'
    condition:
      - condition: state
        entity_id: media_player.bedroom
        state: playing
    action:
      - action: script.alarm_clock_dismiss

  - alias: alarm_clock_dismiss
    id: e43a2a64-d1b3-11ef-8aa3-0800277ca3d8
    trigger:
      - event_data:
          action: alarm_clock_dismiss
        event_type: mobile_app_notification_action
        trigger: event
    action:
      - action: script.alarm_clock_dismiss
      - action: notify.mobile_app_daniele_shiba
        data:
          message: clear_notification
          data:
            tag: alarm_clock

script:

  # TODO parametrizzare e generalizzare in media_player (può servire?)
  alarm_clock_volume_increase:
    description: Incrementa gradualmente il volume della radiosveglia.
    mode: restart
    sequence:
      - action: media_player.volume_set
        data:
          entity_id: media_player.bedroom
          volume_level: '0'
      - delay:
          seconds: 5
      - repeat:
          while:
            # TODO usare mqtt perché reagisce immediatamente; e comunque non è detto che parta subito (es. disservizio internet radio)
            #- condition: template
            #  value_template: "{{ is_state('media_player.bedroom', 'playing') }}"
            - condition: template
              value_template: "{{ state_attr('media_player.bedroom', 'volume_level')|float < states('input_number.alarm_clock_volume')|float }}"
          sequence:
            - action: media_player.volume_set
              data:
                entity_id: media_player.bedroom
                volume_level: >
                  {% set target = states('input_number.alarm_clock_volume')|float %}
                  {% set level = state_attr('media_player.bedroom', 'volume_level')|float + states('input_number.alarm_clock_increment')|float %}
                  {% if level < target %} {{level|round(2)}}
                  {% else %} {{ target }}
                  {% endif %}
            - delay:
                seconds: 5

  alarm_clock_dismiss:
    description: Annulla la radiosveglia
    mode: restart
    sequence:
      - action: media_player.media_stop
        entity_id: media_player.bedroom
