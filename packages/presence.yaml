# Presence automations

sensor:

  # Numero di persone note in casa
  - platform: template
    sensors:
      people_home_count:
        entity_id:
          - person.daniele
        value_template: >-
          {% set count = 0 %}
          {% if is_state("person.daniele", "home") %}
            {% set count = count + 1 %}
          {% endif %}
          {{count}}

automation:

  - alias: Report device states on startup
    initial_state: 'on'
    trigger:
      - platform: homeassistant
        event: start
    action:
      - delay: '00:00:30'
      - service: mqtt.publish
        data:
          topic: 'homeassistant/monitor/KNOWN DEVICE STATES'

  - alias: daniele_arrived
    initial_state: off
    trigger:
      - platform: state
        entity_id: person.daniele
        to: 'home'
    action:
      # Aspetta che la porta sia chiusa
      - wait_template: "{{ is_state('binary_sensor.door_main', 'off') }}"
      - delay:
          seconds: 10
      - service: script.welcome_home

  - alias: daniele_left
    initial_state: off
    trigger:
      - platform: state
        entity_id: person.daniele
        to: 'not_home'
    action:
      - service: light.turn_off
        entity_id: all
      - service: media_player.turn_off
        entity_id: media_player.kodi
      - service: media_player.turn_off
        entity_id: media_player.tv
      - service: switch.turn_on
        entity_id: switch.homeserver

  # Porta di ingresso aperta
  # Se nessuno presente, fai qualcosa e fa scattare lo scan di arrivo
  - alias: main_door_opened_empty
    trigger:
      - platform: state
        entity_id: binary_sensor.door_main
        to: 'on'
    condition:
      condition: or
      conditions:
        # Casa vuota
        - condition: numeric_state
          entity_id: sensor.people_home_count
          below: 1
        # Il numero di persone in casa è variato recentemente
        # Usato nei casi di bluetooth o wifi rilevati prima dell'ingresso in casa
        - condition: template
          value_template: '{{ (as_timestamp(now()) - as_timestamp(states.sensor.people_home_count.last_changed)) < 120 }}'
    action:
      - service: script.people_arrival
      - service: script.scan_arrival

  # Porta di ingresso aperta
  # Se qualcuno presente, fai scattare lo scan di partenza dopo 60 secondi
  # TODO disattivata per ora, il sensore di movimento cessato è migliore
  - alias: main_door_opened_full
    initial_state: false
    trigger:
      - platform: state
        entity_id: binary_sensor.door_main
        to: 'on'
    condition:
      - condition: numeric_state
        entity_id: sensor.people_home_count
        above: '0'
    action:
      - delay:
          seconds: 60
      - service: script.scan_departure

  # Movimento terminato e porta chiusa meno di 2 minuti fa
  # Fai scattare lo scan di partenza
  - alias: motion_stopped
    trigger:
      - platform: state
        entity_id: binary_sensor.living_door_motion
        to: 'off'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.door_main
          state: 'off'
        - condition: template
          value_template: '{{ (as_timestamp(now()) - as_timestamp(states.binary_sensor.door_main.last_changed)) < 120 }}'
    action:
      - service: script.scan_departure

  # Accendi una lieve luce notturna in caso di movimento
  - alias: motion_night
    trigger:
      - platform: state
        entity_id: group.living_motion
        to: 'on'
    condition:
      condition: and
      conditions:
        # Modalità cinema off
        - condition: state
          entity_id: binary_sensor.cinema_mode
          state: 'off'
        - condition: state
          entity_id: binary_sensor.cinema_paused_mode
          state: 'off'
        - condition: numeric_state
          entity_id: sensor.living_main_lux
          below: 5
    action:
      - service: scene.turn_on
        entity_id: scene.night_guidance_on

  # Spegni la luce notturna quando il movimento è cessato
  - alias: motion_night_end
    trigger:
      - platform: state
        entity_id: group.living_motion
        to: 'off'
    condition:
      condition: and
      conditions:
        # Modalità cinema off
        - condition: state
          entity_id: binary_sensor.cinema_mode
          state: 'off'
        - condition: state
          entity_id: binary_sensor.cinema_paused_mode
          state: 'off'
        # Non mi serve luce utility soggiorno
        - condition: state
          entity_id: input_boolean.need_living_utility_light
          state: 'off'
    action:
      - service: scene.turn_on
        entity_id: scene.night_guidance_off

script:

  # TODO dovrà tenere conto delle persone entrate in casa, per cui non va bene
  # andrà rivisto comunque tutto quando arriverà il sensore della porta...
  people_arrival:
    sequence:
      - condition: state
        entity_id: binary_sensor.living_need_light
        state: 'on'
      - service: scene.turn_on
        entity_id: scene.house_entrance
      - delay:
          minutes: 10
      # Aspetta che il movimento sia cessato oppure che le luci extra si siano spente perché troppa luce in ambiente (accensione luci principali)
      - wait_template: "{{ is_state('group.living_motion', 'off') or is_state('light.living_extra', 'off') }}"
      - service: light.turn_off
        entity_id: light.living_extra

  scan_arrival:
    sequence:
      - service: mqtt.publish
        data:
          topic: 'homeassistant/monitor/scan/ARRIVE'

  scan_departure:
    sequence:
      - service: mqtt.publish
        data:
          topic: 'homeassistant/monitor/scan/DEPART'

input_boolean:

  guest_mode:
    name: 'Ospiti in casa'
    initial: off
    icon: mdi:coffee
