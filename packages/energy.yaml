# Energy management and measurement (electricity, gas, water)
# FIXME forse merita un package dedicato

homeassistant:
  customize:
    sensor.energy_gas_total:
      friendly_name: 'Consumo gas'
      # FIXME not set by utility meter
      device_class: gas
    sensor.energy_water_total:
      friendly_name: 'Consumo acqua'
      # FIXME not set by utility meter
      device_class: water
    sensor.energy_mains_total_f1:
      friendly_name: 'Rete elettrica (F1)'
    sensor.energy_mains_total_f2:
      friendly_name: 'Rete elettrica (F2)'
    sensor.energy_mains_total_f3:
      friendly_name: 'Rete elettrica (F3)'

    sensor.power_light_bedroom_main:
      friendly_name: 'Potenza: luce camera'
    sensor.energy_light_bedroom_main:
      friendly_name: 'Consumo: luce camera'
    sensor.power_light_bedroom_left:
      friendly_name: 'Potenza: luce camera SX'
    sensor.energy_light_bedroom_left:
      friendly_name: 'Consumo: luce camera SX'

utility_meter:
  energy_mains_total:
    source: sensor.dummy_energy_mains_total
    tariffs:
      - F1
      - F2
      - F3
  energy_gas_total:
    source: sensor.dummy_energy_gas_total
  energy_water_total:
    source: sensor.dummy_energy_water_total

# TODO automazioni cambio tariffa elettrica
#F1: dalle 08:00 alle 19:00 dal Lunedì al Venerdì;
#F2: dalle 07:00 alle 08:00 e dalle 19:00 alle 23:00 dal Lunedì al Venerdì e dalle 07:00 alle 23:00 del Sabato;
#F3: dalle 00:00 alle 07:00 e dalle 23:00 alle 24:00 dal Lunedì al Sabato e tutte le ore della Domenica e dei giorni festivi.
#Sul display del contatore riprogrammato orario, premendo in sequenza il pulsante, potrai visualizzare le fasce secondo la seguente corrispondenza:
# A1+=F1; A2+=F2; A3+ ed A4+ =F3 dove A4+ registra consumi eventualmente non attribuibili alla fascia corrispondente nel caso di perdita del riferimento orario

sensor:

  - platform: template
    sensors:
      dummy_energy_mains_total:
        value_template: '0'
        device_class: energy
        unit_of_measurement: kWh
      dummy_energy_gas_total:
        value_template: '0'
        device_class: gas
        unit_of_measurement: m³
      dummy_energy_water_total:
        value_template: '0'
        device_class: water
        unit_of_measurement: m³

input_number:

  energy_mains_total_f1:
    name: 'Energia totale (F1)'
    min: 0
    max: 9999999
    step: 0.01
    mode: box
    unit_of_measurement: kWh
  energy_mains_total_f2:
    name: 'Energia totale (F2)'
    min: 0
    max: 9999999
    step: 0.01
    mode: box
    unit_of_measurement: kWh
  energy_mains_total_f3:
    name: 'Energia totale (F3)'
    min: 0
    max: 9999999
    step: 0.01
    mode: box
    unit_of_measurement: kWh

  energy_gas_total:
    name: 'Gas totale'
    min: 0
    max: 999999
    step: 0.001
    mode: box
    unit_of_measurement: m³

  energy_water_total:
    name: 'Acqua totale'
    min: 0
    max: 9999
    step: 1
    mode: box
    unit_of_measurement: m³

powercalc:
  power_sensor_naming: 'power_{}'
  power_sensor_friendly_naming: 'Potenza: {}'
  energy_sensor_naming: 'energy_{}'
  energy_sensor_friendly_naming: 'Consumo: {}'
  # Shelly 1 controlled devices
  # https://github.com/bramstroker/homeassistant-powercalc/discussions/330#discussioncomment-1498521

automation:

  - alias: energy_mains_sync
    description: Sincronizza letture corrente agli helper
    trigger:
      - trigger: state
        entity_id: sensor.energy_mains_total_f1
        to:
      - trigger: state
        entity_id: sensor.energy_mains_total_f2
        to:
      - trigger: state
        entity_id: sensor.energy_mains_total_f3
        to:
    action:
      - action: input_number.set_value
        data:
          entity_id: input_number.energy_mains_total_f1
          value: "{{ states('sensor.energy_mains_total_f1') }}"
      - action: input_number.set_value
        data:
          entity_id: input_number.energy_mains_total_f2
          value: "{{ states('sensor.energy_mains_total_f2') }}"
      - action: input_number.set_value
        data:
          entity_id: input_number.energy_mains_total_f3
          value: "{{ states('sensor.energy_mains_total_f3') }}"

  - alias: energy_gas_sync
    description: "Sincronizza letture gas all'helper"
    trigger:
      - trigger: state
        entity_id: sensor.energy_gas_total
        to:
    action:
      - action: input_number.set_value
        data:
          entity_id: input_number.energy_gas_total
          value: "{{ states('sensor.energy_gas_total') }}"

  - alias: energy_water_sync
    description: "Sincronizza letture acqua all'helper"
    trigger:
      - trigger: state
        entity_id: sensor.energy_water_total
        to:
    action:
      - action: input_number.set_value
        data:
          entity_id: input_number.energy_water_total
          value: "{{ states('sensor.energy_water_total') }}"

script:

  input_reading_energy_mains:
    sequence:
      - action: utility_meter.calibrate
        data:
          entity_id: sensor.energy_mains_total_f1
          value: "{{ states('input_number.energy_mains_total_f1') }}"
      - action: utility_meter.calibrate
        data:
          entity_id: sensor.energy_mains_total_f2
          value: "{{ states('input_number.energy_mains_total_f2') }}"
      - action: utility_meter.calibrate
        data:
          entity_id: sensor.energy_mains_total_f3
          value: "{{ states('input_number.energy_mains_total_f3') }}"

  input_reading_energy_gas:
    sequence:
      - action: utility_meter.calibrate
        data:
          entity_id: sensor.energy_gas_total
          value: "{{ states('input_number.energy_gas_total') }}"

  input_reading_energy_water:
    sequence:
      - action: utility_meter.calibrate
        data:
          entity_id: sensor.energy_water_total
          value: "{{ states('input_number.energy_water_total') }}"
