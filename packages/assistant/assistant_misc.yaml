homeassistant:
  customize:
    script.goodmorning:
      friendly_name: Buongiorno!
      icon: mdi:coffee

intent_script:

  TrashReminderMorning:
    action:
      - action: input_boolean.turn_on
        entity_id: input_boolean.reminder_trash_morning
      - action: random_template.render
        data:
          key: assistant_TrashReminderMorning
          variables:
            when_raw: "{{ when }}"
        response_variable: speech
      - stop: "Returning speech"
        response_variable: "speech"
    speech:
      # FIXME ssml is not supported by HASS
      type: plain
      text: "<p>{{ action_response.text }}</p>"

  GreetingGoodMorning:
    action:
      - action: script.turn_on
        data:
          entity_id: script.goodmorning_actions
      - action: random_template.render
        data:
          key: assistant_goodmorning
        response_variable: speech
      - stop: "Returning speech"
        response_variable: "speech"
    speech:
      # FIXME ssml is not supported by HASS
      type: plain
      text: "<p>{{ action_response.text }}</p>"

  GreetingGeneral:
    action:
      - action: random_template.render
        data:
          key: assistant_GreetingGeneral
        response_variable: speech
      - stop: "Returning speech"
        response_variable: "speech"
    speech:
      # FIXME ssml is not supported by HASS
      type: plain
      text: "<p>{{ action_response.text }}</p>"

  Thankyou:
    action:
      - action: random_template.render
        data:
          key: assistant_thankyou
        response_variable: speech
      - stop: "Returning speech"
        response_variable: "speech"
    speech:
      # FIXME ssml is not supported by HASS
      type: plain
      text: "<p>{{ action_response.text }}</p>"

  AnnounceGoingAway:
    action:
      - action: script.turn_on
        data:
          entity_id: script.announce_going_away_actions
      - action: random_template.render
        data:
          key: assistant_announce_going_away
        response_variable: speech
      - stop: "Returning speech"
        response_variable: "speech"
    speech:
      # FIXME ssml is not supported by HASS
      type: plain
      text: "<p>{{ action_response.text }}</p>"

  # Saluto della buonanotte
  GreetingGoodNight:
    action:
      - action: input_select.select_option
        data:
          entity_id: input_select.house_mode
          option: night
      - action: random_template.render
        data:
          key: assistant_goodnight
        response_variable: speech
      - stop: "Returning speech"
        response_variable: "speech"
    speech:
      # FIXME ssml is not supported by HASS
      type: plain
      text: "<p>{{ action_response.text }}</p>"

  DNDModeOn:
    action:
      - action: input_select.select_option
        data:
          entity_id: input_select.house_mode
          option: dnd
      - action: random_template.render
        data:
          key: assistant_DNDModeOn
        response_variable: speech
      - stop: "Returning speech"
        response_variable: "speech"
    speech:
      # FIXME ssml is not supported by HASS
      type: plain
      text: "<p>{{ action_response.text }}</p>"

  PutTVNewsOn:
    action:
      - action: script.tv_channel_favourite_news
      - action: random_template.render
        data:
          key: assistant_PutTVNewsOn_ok
        response_variable: speech
      - stop: "Returning speech"
        response_variable: "speech"
    speech:
      # FIXME ssml is not supported by HASS
      type: plain
      text: "<p>{{ action_response.text }}</p>"

  GamingMode:
    action:
      - action: script.gaming_mode_activate
      - action: random_template.render
        data:
          key: assistant_gamingmode_ok
        response_variable: speech
      - stop: "Returning speech"
        response_variable: "speech"
    speech:
      # FIXME ssml is not supported by HASS
      type: plain
      text: "<p>{{ action_response.text }}</p>"

input_boolean:

  # TODO prevedere variabile per indicare il giorno del reminder
  reminder_trash_morning:
    name: 'Porta la spazzatura domattina'
    initial: false
    icon: mdi:recycle

  reminder_refuel_car:
    name: "Rifornire di carburante l'automobile"
    initial: false
    icon: mdi:gas-station

binary_sensor:
  - platform: template
    sensors:
      assistant_can_speak:
        value_template: "{{ states.sensor.people_count_home_local.state | int(0) > 0 }}"

automation:

  # Avvisa di viaggi duri al lavoro se in mattina feriale e c'è Daniele in casa
  - alias: work_commute_hard
    trigger:
      - trigger: numeric_state
        entity_id: sensor.commute_to_work
        above: !secret work_commute_hard_duration
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.workmorning
          state: 'on'
        - condition: state
          entity_id: person.daniele
          state: 'home'
    action:
      - event: assistant_speak_tts
        event_data:
          template: work_commute_hard

  - alias: home_commute_hard
    trigger:
      - trigger: numeric_state
        entity_id: sensor.commute_to_home
        above: !secret work_commute_hard_duration
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: binary_sensor.workevening
          state: 'on'
        - condition: template
          value_template: "{{ not is_state('person.daniele', 'home') }}"
    action:
      action: script.notify_info
      data:
        category: Tempo di viaggio
        message: |-
          Tempo previsto per il ritorno a casa: {{ states.sensor.commute_to_home.state_with_unit }}

  - alias: karen_internet_unavailable
    trigger:
      - trigger: state
        entity_id: binary_sensor.internet
        from: 'on'
        to: 'off'
    condition:
      condition: state
      entity_id: binary_sensor.assistant_can_speak
      state: 'on'
    action:
      - action: script.say_something_rendered
        data:
          url: "http://192.168.100.1:8124/local/tts/microsoft_tts/karen_internet_unavailable{{ range(1, 3) | random }}.mp3"

  - alias: karen_internet_restored
    trigger:
      - trigger: state
        entity_id: binary_sensor.internet
        from: 'off'
        to: 'on'
    condition:
      condition: state
      entity_id: binary_sensor.assistant_can_speak
      state: 'on'
    action:
      - action: script.say_something_rendered
        data:
          url: "http://192.168.100.1:8124/local/tts/microsoft_tts/karen_internet_restored{{ range(1, 4) | random }}.mp3"

  # Avviso vocale chiamata in arrivo sul cellulare
  - alias: shiba_phone_call_incoming
    trigger:
      - trigger: template
        value_template: '{{ states.sensor.shiba_phone_call_incoming_caller.state|length > 0 }}'
    condition:
      condition: and
      conditions:
        # Se non ci sono media in riproduzione in TV
        - condition: state
          entity_id: binary_sensor.cinema_mode
          state: 'off'
    action:
      - event: assistant_speak_tts
        event_data:
          template: incoming_phone_call
          variables:
            caller: "{{ states.sensor.shiba_phone_call_incoming_caller.state }}"

  # Alterazioni di stato della casa

  - alias: house_mode_assistant_misc_day
    trigger:
      - trigger: state
        entity_id: input_select.house_mode
        to: day_working
      - trigger: state
        entity_id: input_select.house_mode
        to: day_not_working
    action:
      - action: automation.turn_on
        entity_id:
          - automation.work_commute_hard
          - automation.karen_internet_unavailable
          - automation.karen_internet_restored
          - automation.shiba_phone_call_incoming

  - alias: house_mode_assistant_misc_quiet1
    trigger:
      - trigger: state
        entity_id: input_select.house_mode
        to: night
      - trigger: state
        entity_id: input_select.house_mode
        to: dnd
      - trigger: state
        entity_id: input_select.house_mode
        to: away
      - trigger: state
        entity_id: input_select.house_mode
        to: extended_away
    action:
      - action: automation.turn_off
        entity_id:
          - automation.work_commute_hard
          - automation.karen_internet_unavailable
          - automation.karen_internet_restored
          - automation.shiba_phone_call_incoming

  - alias: house_mode_assistant_misc_quiet2
    trigger:
      - trigger: state
        entity_id: input_select.house_mode
        to: guest
    action:
      - action: automation.turn_off
        entity_id:
          - automation.work_commute_hard
          - automation.karen_internet_unavailable
          - automation.karen_internet_restored

  - alias: reminder_refuel_car
    trigger:
      - trigger: time
        at: "06:30:00"
    condition:
      - condition: state
        entity_id: input_boolean.reminder_refuel_car
        state: 'on'
    action:
      action: script.notify_info
      data:
        category: Promemoria benzina
        message: |-
          Ricordati di fare benzina oggi.

  - alias: announce_going_away_on_wifi_disconnect
    description: 'Messaggio di uscita per Daniele alla disconnessione del WiFi'
    trigger:
      - trigger: state
        entity_id: sensor.daniele_shiba_wifi_connection
        from: !secret wifi_home
    condition:
      - condition: and
        conditions:
          # movimento in soggiorno
          - condition: state
            entity_id: group.motion_living
            state: 'on'
          # porta chiusa da più di 5 minuti
          - condition: template
            value_template: >-
              {{ is_state("binary_sensor.door_main", "off") and
                (as_timestamp(now()) - as_timestamp(states.binary_sensor.door_main.last_changed)) > 300 }}
    action:
      # non proseguire se la porta è aperta o è stata chiusa da poco
      - action: script.announce_going_away

mqtt:
  sensor:
    - name: shiba_phone_call_incoming_caller
      state_topic: homeassistant/shiba/device/phone/state
      value_template: "{{ value_json.caller_name if value_json.state == 'ringing' else '' }}"

script:

  # Saluto del buongiorno
  # TODO usare assist per il giornale radio?
  goodmorning_actions:
    sequence:
      - action: input_select.select_option
        data:
          entity_id: input_select.house_mode
          option: "{{ 'day_working' if is_state('binary_sensor.workday', 'on') else 'day_not_working' }}"
      - condition: template
        value_template: '{{ 4 <= now().hour < 10 }}'
      - delay:
          seconds: 10
      - wait_template: "{{ is_state('media_player.lounge', 'idle') or is_state('media_player.lounge', 'paused') }}"
        timeout: '00:01:00'
      - action: media_player.volume_set
        data:
          entity_id: media_player.lounge
          volume_level: !secret lounge_volume
      - action: media_player.play_media
        data:
          entity_id: media_player.lounge
          media_content_id: >-
            {% set hour = states('sensor.time').split(':')[0] %}
            https://cdn.rtl.it/RTLFM/on-demand/giornale-orario/go_{{ hour }}.mp3
          media_content_type: music

  # Bentornato a casa
  # TODO usare assist (se manteniamo annuncio vocale)
  welcome_home:
    sequence:
      # TODO da ripensare
      #- event: assistant_speak_tts
      #  event_data:
      #    template: welcome_home
      - condition: template
        value_template: '{{ (now().hour == 20 and now().minute < 10) or (now().hour == 19 and now().minute > 50) }}'
      - delay:
          seconds: 5
      #- wait_template: "{{ is_state('media_player.lounge', 'idle') or is_state('media_player.lounge', 'paused') }}"
      #  timeout: '00:01:00'
      - action: script.tv_channel_favourite_news

  # Andando via
  # TODO da sistemare con altre informazioni
  # TODO sfruttare macro
  # TODO variazioni di testo
  announce_going_away:
    sequence:
      - event: assistant_speak_tts
        event_data:
          template: announce_going_away
      - action: script.announce_going_away_actions

  announce_going_away_actions:
    sequence:
      - delay:
          seconds: 10
      - action: input_boolean.turn_off
        entity_id: input_boolean.reminder_trash_morning
      # diamo per scontato che se stiamo uscendo metteremo benzina
      - action: input_boolean.turn_off
        entity_id: input_boolean.reminder_refuel_car
      - action: switch.turn_on
        entity_id: switch.homeserver
