# Servizi di notifica

# disabled for now -- signal_messenger2:

# Strumenti di notifica
notify:
  # notify.mobile_app_daniele_shiba definito da integrazione mobile

  - platform: kodi
    name: kodi
    host: !secret mediarasp_host
    username: !secret kodi_username
    password: !secret kodi_password
  - platform: smtp
    name: email_daniele
    server: !secret smtp_server
    port: 587
    encryption: starttls
    sender: !secret email_sender
    recipient: !secret email_recipient_daniele

  # ### Notify entities che usano gli script passando per le API REST

  - name: debug
    platform: rest
    resource: 'http://localhost:8123/api/services/script/notify_debug'
    method: POST_JSON
    headers:
      authorization: !secret hass_authorization
      content-type: 'application/json'
    message_param_name: message
    title_param_name: category
    data:
      speak: "{{ data['speak'] if data and 'speak' in data else false }}"

  - name: information
    platform: rest
    resource: 'http://localhost:8123/api/services/script/notify_info'
    method: POST_JSON
    headers:
      authorization: !secret hass_authorization
      content-type: 'application/json'
    message_param_name: message
    title_param_name: category
    data:
      speak: "{{ data['speak'] if data and 'speak' in data else false }}"

  - name: important
    platform: rest
    resource: 'http://localhost:8123/api/services/script/notify_important'
    method: POST_JSON
    headers:
      authorization: !secret hass_authorization
      content-type: 'application/json'
    message_param_name: message
    title_param_name: category
    data:
      speak: "{{ data['speak'] if data and 'speak' in data else false }}"

  - name: emergency
    platform: rest
    resource: 'http://localhost:8123/api/services/script/notify_emergency'
    method: POST_JSON
    headers:
      authorization: !secret hass_authorization
      content-type: 'application/json'
    message_param_name: message
    title_param_name: category
    data:
      speak: "{{ data['speak'] if data and 'speak' in data else false }}"

script:

  notify_debug:
    description: "Debug notification"
    fields:
      message:
        description: "Message content"
        example: "An event has occured"
    sequence:
      - action: notify.mobile_app_daniele_shiba
        data:
          title: "Debug"
          message: "{{ message }}"

  notify_info:
    description: "Information notification"
    fields:
      category:
        description: "Message category"
        example: "Environment"
        required: true
      message:
        description: "Message content"
        example: "An event has occured"
        required: true
      speak:
        description: "Make Karen speak this message (only if people present at home)"
        example: "true"
        default: false
        required: false
    sequence:
      # notify to Kodi if TV is on and on the right source
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.tv_on_kodi
                state: 'on'
            sequence:
              - action: notify.kodi
                data:
                  title: "{{ category }}"
                  message: "{{ message }}"
      - action: notify.mobile_app_daniele_shiba
        data:
          title: "{{ category }}"
          message: "{{ message }}"
          data:
            channel: "Information"
            priority: high
      - choose:
          - conditions: >
              {{ (speak if speak is defined else False) and is_state('binary_sensor.cinema_mode', 'off') and
                 states.input_select.house_mode.state in ['day_working','day_not_working'] and
                 is_state('binary_sensor.assistant_can_speak', 'on') }}
            sequence:
              - action: script.say_something
                data:
                  message: "{{ message }}"

  notify_important:
    description: "Important notification"
    fields:
      category:
        description: "Message category"
        example: "Environment"
        required: true
      message:
        description: "Message content"
        example: "An event has occured"
      speak:
        description: "Make Karen speak this message (only if people present at home)"
        example: "true"
        default: true
        required: false
    sequence:
      # notify to Kodi if TV is on and on the right source
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.tv_on_kodi
                state: 'on'
            sequence:
              - action: notify.kodi
                data:
                  title: "{{ category }}"
                  message: "{{ message }}"
      - action: notify.mobile_app_daniele_shiba
        data:
          title: "{{ category }}"
          message: "{{ message }}"
          data:
            priority: high
            channel: "Important"
      - choose:
          - conditions: >
              {{ (speak if speak is defined else True) and states.input_select.house_mode.state in ['day_working','day_not_working'] and
                 is_state('binary_sensor.assistant_can_speak', 'on') }}
            sequence:
              - action: script.say_something
                data:
                  message: "{{ message }}"

  notify_emergency:
    description: "Emergency notification"
    fields:
      category:
        description: "Message category"
        example: "Environment"
        required: true
      message:
        description: "Message content"
        example: "An event has occured"
      speak:
        description: "Make Karen speak this message (only if people present at home)"
        example: "true"
        default: true
        required: false
    sequence:
      # notify to Kodi if TV is on and on the right source
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.tv_on_kodi
                state: 'on'
            sequence:
              - action: notify.kodi
                data:
                  title: "{{ category }}"
                  message: "{{ message }}"
      - action: notify.mobile_app_daniele_shiba
        data:
          title: "{{ category }}"
          message: "{{ message }}"
          data:
            priority: high
            channel: "Emergency"
      - choose:
          - conditions: >
              {{ (speak if speak is defined else True) and is_state('binary_sensor.assistant_can_speak', 'on') }}
            sequence:
              - action: script.say_something
                data:
                  message: "Attenzione! {{ message }}"
